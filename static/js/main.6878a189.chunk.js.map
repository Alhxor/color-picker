{"version":3,"sources":["components/Color/Color.js","components/Star/Star.js","components/StarRating/StarRating.js","components/ColorList/ColorList.js","components/AddColorForm/AddColorForm.js","data/mock.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Color","name","hexCode","className","style","Star","selected","highlighted","onClick","e","onMouseOver","onMouseOut","flavor","StarRating","props","highlightAllStarsToTheLeft","number","setState","starsHighlighted","removeHighlighting","render","Array","totalStars","map","x","i","key","starsSelected","state","onRatingChange","React","Component","defaultProps","ColorList","colors","onColorRatingChange","color","id","rating","AddColorForm","onChangeInput","stateKey","target","value","onSubmit","event","preventDefault","title","onNewColor","type","placeholder","onChange","data","App","addColor","setColorRating","mockData","v4","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6878a189.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Color.css';\r\n\r\nconst Color = ({ name, hexCode }) => (\r\n    <div className=\"show-color\">\r\n        <span className=\"color-title\">{name}</span>\r\n        <div className=\"color-sample\" style={{'backgroundColor': hexCode}} />\r\n    </div>\r\n);\r\n\r\nColor.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    hexCode: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Color;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Star.css';\r\n\r\nconst Star = ({\r\n    selected = false,\r\n    highlighted = false,\r\n    onClick = e=>e,\r\n    onMouseOver = e=>e,\r\n    onMouseOut = e=>e\r\n}) => {\r\n    const flavor = (highlighted) ? 'highlighted' :\r\n                    (selected) ? 'selected' : '';\r\n\r\n    return (\r\n        <div\r\n            className={`star ${flavor}`}\r\n            onClick={onClick}\r\n            onMouseOver={onMouseOver}\r\n            onMouseOut={onMouseOut}\r\n        />\r\n    );\r\n};\r\n\r\nStar.propTypes = {\r\n    selected: PropTypes.bool,\r\n    highlighted: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    onMouseOver: PropTypes.func,\r\n    onMouseOut: PropTypes.func,\r\n};\r\n\r\nexport default Star;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './StarRating.css';\r\nimport Star from '../Star/Star';\r\n\r\nclass StarRating extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            starsHighlighted: 0,\r\n        };\r\n    }\r\n\r\n    highlightAllStarsToTheLeft = number => {\r\n        this.setState({\r\n            starsHighlighted: number,\r\n        });\r\n    };\r\n\r\n    removeHighlighting = () => {\r\n        this.setState({\r\n            starsHighlighted: 0\r\n        });\r\n    }\r\n\r\n    render = () => (\r\n        <div className=\"StarRating\">\r\n            {[...Array(this.props.totalStars)].map((x, i) =>\r\n                <Star\r\n                    key={i}\r\n                    selected={i < this.props.starsSelected}\r\n                    highlighted={i < this.state.starsHighlighted}\r\n                    onClick={() => {\r\n                        this.removeHighlighting();\r\n                        return this.props.onRatingChange(i+1);\r\n                    }}\r\n                    onMouseOver={() => this.highlightAllStarsToTheLeft(i+1)}\r\n                    onMouseOut={() => this.removeHighlighting()}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nStarRating.propTypes = {\r\n    stars: PropTypes.number,\r\n    selected: PropTypes.number,\r\n    onRatingChange: PropTypes.func\r\n};\r\n\r\nStarRating.defaultProps = {\r\n    totalStars: 5,\r\n    starsSelected: 0,\r\n    onRatingChange: (...x) => x,\r\n};\r\n\r\nexport default StarRating;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Color from '../Color/Color';\r\nimport StarRating from '../StarRating/StarRating';\r\nimport './ColorList.css';\r\n\r\nconst ColorList = ({ colors, onColorRatingChange = (...x) => x }) => (\r\n    <ul>\r\n        {colors.map((color, i) => (\r\n            <li key={color.id}>\r\n                <Color\r\n                    name={color.name}\r\n                    hexCode={color.hexCode}\r\n                />\r\n                <StarRating\r\n                    totalStars={5}\r\n                    starsSelected={color.rating}\r\n                    onRatingChange={onColorRatingChange(color.id)}\r\n                />\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nColorList.propTypes = {\r\n    colors: PropTypes.array.isRequired,\r\n    onColorRatingChange: PropTypes.func\r\n};\r\n\r\nexport default ColorList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AddColorForm.css';\r\n\r\nclass AddColorForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onNewColor = props.onNewColor;\r\n        this.state = {\r\n            title: '',\r\n            hexCode: '#000000',\r\n        };\r\n    }\r\n\r\n    onChangeInput = stateKey => ({ target }) => {\r\n        this.setState({\r\n            [stateKey]: target.value,\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { title, hexCode } = this.state;\r\n        this.onNewColor({ title, hexCode });\r\n    }\r\n\r\n    render = () => (\r\n        <form onSubmit={this.onSubmit}>\r\n            <fieldset>\r\n                <legend>Add a new color</legend>\r\n                <div className=\"formElementsContainer\">\r\n                    <input type=\"text\" placeholder=\"Color title\"\r\n                        onChange={this.onChangeInput('title')} />\r\n                    <input type=\"color\" onChange={this.onChangeInput('hexCode')} />\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </div>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n}\r\n\r\nAddColorForm.propTypes = {\r\n    onNewColor: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddColorForm;\r\n","const data = {\r\n    colors: [\r\n        {\r\n            name: 'red',\r\n            hexCode: '#aa0000',\r\n            rating: 1\r\n        },\r\n        {\r\n            name: 'green',\r\n            hexCode: '#00aa00',\r\n            rating: 4\r\n        },\r\n        {\r\n            name: 'blue',\r\n            hexCode: '#0000aa',\r\n            rating: 3\r\n        },\r\n    ],\r\n}\r\n\r\nexport default data;\r\n","import React from 'react';\nimport './App.css';\nimport ColorList from '../ColorList/ColorList';\nimport AddColorForm from '../AddColorForm/AddColorForm';\nimport mockData from '../../data/mock.js';\nimport v4 from 'shortid';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        const { colors } = mockData;\n        this.state = {\n            colors: colors.map(color => ({\n                ...color,\n                id: v4(),\n            })),\n        };\n    }\n\n    addColor = ({ title, hexCode, rating=0 }) => {\n        this.setState({\n            colors: [\n                ...this.state.colors,\n                {name: title, hexCode: hexCode, rating: rating}\n            ]\n        });\n    }\n\n    setColorRating = id => rating => {\n        const colors = this.state.colors.map(\n            color =>\n                (color.id === id) ?\n                    { ...color, rating: rating } :\n                    color\n        );\n        this.setState({ colors: colors });\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1>Color picker</h1>\n                </header>\n                <main>\n                    <AddColorForm onNewColor={this.addColor} />\n                    <ColorList\n                        colors={this.state.colors}\n                        onColorRatingChange={this.setColorRating}\n                    />\n                </main>\n                <footer>\n                    <p>\n                        Practice exercise, inspired by \"Learning React: Functional Web Development with React and Redux\"\n                    </p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// window.React = React; // supposed to let you skip import React in components\n// not working for some reason, maybe it's a bit off\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}