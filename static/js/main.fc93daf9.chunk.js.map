{"version":3,"sources":["serviceWorker.js","components/ui/MainLayout/MainLayout.js","constants.js","components/ui/AddColorForm/AddColorForm.js","components/containers/AddColor/AddColor.js","actions/actions.js","components/ui/Color/Color.js","components/ui/Star/Star.js","components/ui/StarRating/StarRating.js","components/ui/ColorList/ColorList.js","components/containers/Colors/Colors.js","store/initialState.js","reducers/color.js","reducers/colors.js","store/storeFactory.js","store/store.js","index.js","components/ColorPickerApp.js"],"names":["Boolean","window","location","hostname","match","MainLayout","children","className","C","AddColorForm","updateInput","stateKey","target","setState","value","onSubmit","event","preventDefault","state","title","hexCode","props","addColor","render","type","placeholder","onChange","Component","connect","id","shortid","generate","Color","removeColor","e","onClick","style","Star","selected","highlighted","onMouseOver","onMouseOut","flavor","StarRating","highlightAllStarsToTheLeft","number","starsHighlighted","removeHighlighting","Array","totalStars","map","x","i","key","starsSelected","onRatingChange","React","defaultProps","ColorList","colors","rateColor","color","console","log","rating","dispatch","action","c","filter","logger","store","next","groupCollapsed","getState","result","groupEnd","saver","localStorage","JSON","stringify","reducer","combineReducers","storeFactory","initialState","stateData","createStore","parse","applyMiddleware","ReactDOM","AddColor","Colors","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc93daf9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './MainLayout.css';\r\n\r\nconst MainLayout = ({ children }) => (\r\n    <div className=\"App\">\r\n        <header>\r\n            <h1>Color picker</h1>\r\n        </header>\r\n        <main>\r\n            { children }\r\n        </main>\r\n        <footer>\r\n            <p>\r\n                Practice exercise, inspired by \"Learning React: Functional Web Development with React and Redux\"\r\n            </p>\r\n        </footer>\r\n    </div>\r\n);\r\n\r\nexport default MainLayout;\r\n","export const C = {\r\n    ADD_COLOR: 'ADD_COLOR',\r\n    REMOVE_COLOR: 'REMOVE_COLOR',\r\n    RATE_COLOR: 'RATE_COLOR',\r\n    SORT_COLORS: 'SORT_COLORS'\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AddColorForm.css';\r\n\r\nclass AddColorForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            title: \"\",\r\n            hexCode: \"#000000\",\r\n        };\r\n    }\r\n\r\n    updateInput = stateKey => ({ target }) => {\r\n        this.setState({\r\n            [stateKey]: target.value,\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { title, hexCode } = this.state;\r\n        this.props.addColor(title, hexCode);\r\n    }\r\n\r\n    render = () => (\r\n        <form onSubmit={this.onSubmit}>\r\n            <fieldset>\r\n                <legend>Add a new color</legend>\r\n                <div className=\"formElementsContainer\">\r\n                    <input type=\"text\" placeholder=\"Color title\"\r\n                        onChange={this.updateInput('title')} />\r\n                    <input type=\"color\"\r\n                        onChange={this.updateInput('hexCode')} />\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </div>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n}\r\n\r\nAddColorForm.propTypes = {\r\n    addColor: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddColorForm;\r\n","import { connect } from 'react-redux';\r\nimport { addColor } from '../../../actions/actions';\r\nimport AddColorForm from '../../ui/AddColorForm/AddColorForm';\r\n\r\nexport default connect(\r\n    null,\r\n    { addColor }\r\n)(AddColorForm);\r\n","import shortid from 'shortid';\r\nimport {C} from '../constants';\r\n\r\nexport const addColor = (title='', hexCode='#000000') => ({\r\n    type: C.ADD_COLOR,\r\n    id: shortid.generate(),\r\n    title,\r\n    hexCode,\r\n});\r\n\r\nexport const removeColor = id => ({\r\n    type: C.REMOVE_COLOR,\r\n    id,\r\n});\r\n\r\nexport const rateColor = (id, rating) => ({\r\n    type: C.RATE_COLOR,\r\n    id,\r\n    rating,\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport './Color.css';\r\n\r\nconst Color = ({ title, hexCode, removeColor=e=>e }) => (\r\n    <div className=\"show-color\">\r\n        <span className=\"color-title\">{title}</span>\r\n        <span className=\"remove-color\" onClick={removeColor}>\r\n            <FaTrash />\r\n        </span>\r\n        <div className=\"color-sample\" style={{'backgroundColor': hexCode}} />\r\n    </div>\r\n);\r\n\r\nColor.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    hexCode: PropTypes.string.isRequired,\r\n    removeColor: PropTypes.func\r\n};\r\n\r\nexport default Color;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Star.css';\r\n\r\nconst Star = ({\r\n    selected = false,\r\n    highlighted = false,\r\n    onClick = e=>e,\r\n    onMouseOver = e=>e,\r\n    onMouseOut = e=>e\r\n}) => {\r\n    const flavor = (highlighted) ? 'highlighted' :\r\n                    (selected) ? 'selected' : '';\r\n\r\n    return (\r\n        <div\r\n            className={`star ${flavor}`}\r\n            onClick={onClick}\r\n            onMouseOver={onMouseOver}\r\n            onMouseOut={onMouseOut}\r\n        />\r\n    );\r\n};\r\n\r\nStar.propTypes = {\r\n    selected: PropTypes.bool,\r\n    highlighted: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    onMouseOver: PropTypes.func,\r\n    onMouseOut: PropTypes.func,\r\n};\r\n\r\nexport default Star;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './StarRating.css';\r\nimport Star from '../Star/Star';\r\n\r\nclass StarRating extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            starsHighlighted: 0,\r\n        };\r\n    }\r\n\r\n    highlightAllStarsToTheLeft = number => {\r\n        this.setState({\r\n            starsHighlighted: number,\r\n        });\r\n    };\r\n\r\n    removeHighlighting = () => {\r\n        this.setState({\r\n            starsHighlighted: 0\r\n        });\r\n    }\r\n\r\n    render = () => (\r\n        <div className=\"StarRating\">\r\n            {[...Array(this.props.totalStars)].map((x, i) =>\r\n                <Star\r\n                    key={i}\r\n                    selected={i < this.props.starsSelected}\r\n                    highlighted={i < this.state.starsHighlighted}\r\n                    onClick={() => {\r\n                        this.removeHighlighting();\r\n                        return this.props.onRatingChange(i+1);\r\n                    }}\r\n                    onMouseOver={() => this.highlightAllStarsToTheLeft(i+1)}\r\n                    onMouseOut={() => this.removeHighlighting()}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nStarRating.propTypes = {\r\n    stars: PropTypes.number,\r\n    selected: PropTypes.number,\r\n    onRatingChange: PropTypes.func\r\n};\r\n\r\nStarRating.defaultProps = {\r\n    totalStars: 5,\r\n    starsSelected: 0,\r\n    onRatingChange: (...x) => x,\r\n};\r\n\r\nexport default StarRating;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Color from '../Color/Color';\r\nimport StarRating from '../StarRating/StarRating';\r\nimport './ColorList.css';\r\n\r\nconst ColorList = ({\r\n    colors,\r\n    rateColor = x => x,\r\n    removeColor = x => x\r\n}) => (\r\n    <ul>\r\n        {colors.map(color => {\r\n            console.log(color);\r\n            return (\r\n            <li key={color.id}>\r\n                <Color\r\n                    title={color.title}\r\n                    hexCode={color.hexCode}\r\n                    removeColor={removeColor(color.id)}\r\n                />\r\n                <StarRating\r\n                    totalStars={5}\r\n                    starsSelected={color.rating}\r\n                    onRatingChange={rateColor(color.id)}\r\n                />\r\n            </li>\r\n        )})}\r\n    </ul>\r\n);\r\n\r\nColorList.propTypes = {\r\n    colors: PropTypes.array.isRequired,\r\n    rateColor: PropTypes.func,\r\n    removeColor: PropTypes.func\r\n};\r\n\r\nexport default ColorList;\r\n","import { connect } from 'react-redux';\r\nimport { rateColor, removeColor } from '../../../actions/actions';\r\nimport ColorList from '../../ui/ColorList/ColorList';\r\n\r\nconst mapStateToProps = state => ({ colors: [...state.colors] });\r\nconst mapDispatchToProps = dispatch => ({\r\n    rateColor(id) {\r\n        return rating => dispatch(rateColor(id, rating));\r\n    },\r\n    removeColor(id) {\r\n        return () => dispatch(removeColor(id));\r\n    }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ColorList);\r\n","export default {\r\n    colors: [\r\n        {\r\n            id: 'testred',\r\n            title: 'Testy Red',\r\n            hexCode: '#aa0000',\r\n            rating: 0\r\n        }\r\n    ],\r\n};\r\n","import {C} from '../constants';\r\n\r\nconst color = (state={}, action) => {\r\n    switch(action.type) {\r\n        case C.ADD_COLOR:\r\n            return {\r\n                id: action.id,\r\n                title: action.title,\r\n                hexCode: action.hexCode || '#000000',\r\n                rating: 0,\r\n            };\r\n\r\n        case C.RATE_COLOR:\r\n            return {\r\n                ...state,\r\n                rating: action.rating,\r\n            };\r\n\r\n        default:\r\n            return {...state};\r\n    }\r\n}\r\n\r\nexport default color;\r\n","import {C} from '../constants';\r\nimport color from './color';\r\n\r\nconst colors = (state=[], action) => {\r\n    switch(action.type) {\r\n        case C.ADD_COLOR:\r\n            return [\r\n                ...state,\r\n                color(null, action),\r\n            ];\r\n\r\n        case C.RATE_COLOR:\r\n            return state.map(\r\n                c => c.id !== action.id ? c : color(c, action)\r\n            );\r\n\r\n        case C.REMOVE_COLOR:\r\n            return state.filter(\r\n                c => c.id !== action.id\r\n            );\r\n\r\n        default:\r\n            return [...state];\r\n    }\r\n}\r\n\r\nexport default colors;\r\n","import stateData from './initialState';\r\nimport {\r\n    createStore,\r\n    combineReducers,\r\n    applyMiddleware\r\n} from 'redux';\r\nimport colors from '../reducers/colors';\r\n\r\nconst STORAGE_KEY = 'color-picker';\r\n\r\n/**\r\n * Logs all actions and states after they are dispatched\r\n */\r\nexport const logger = store => next => action => {\r\n    console.groupCollapsed(\"dispatching\", action.type);\r\n    console.log('previous state', store.getState());\r\n    console.log('action', action);\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\n\r\nexport const saver = store => next => action => {\r\n    const result = next(action);\r\n    localStorage[STORAGE_KEY] = JSON.stringify(store.getState())\r\n    return result;\r\n}\r\n\r\n// const reducer = combineReducers({ colors, sort }); // don't have a sort yet\r\nconst reducer = combineReducers({ colors });\r\n\r\nexport const storeFactory = (initialState = stateData) => {\r\n    return createStore(\r\n        reducer,\r\n        (localStorage[STORAGE_KEY] ?\r\n            JSON.parse(localStorage[STORAGE_KEY]) :\r\n            initialState\r\n        ),\r\n        // applyMiddleware(logger));\r\n        // applyMiddleware(saver));\r\n        applyMiddleware(logger, saver));\r\n};\r\n","import { storeFactory } from './storeFactory';\r\n\r\nexport default storeFactory();\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ColorPickerApp from './components/ColorPickerApp';\n\nReactDOM.render(\n    <ColorPickerApp />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport MainLayout from './ui/MainLayout/MainLayout';\r\nimport AddColor from './containers/AddColor/AddColor';\r\nimport Colors from './containers/Colors/Colors';\r\nimport store from '../store/store';\r\n\r\nexport default () => (\r\n    <Provider store={store}>\r\n        <MainLayout>\r\n            <AddColor />\r\n            <Colors />\r\n        </MainLayout>\r\n    </Provider>\r\n)\r\n"],"sourceRoot":""}